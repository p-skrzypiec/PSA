function Set-LabComputerSystem {
    <#
.Synopsis
    Krótki opis
.DESCRIPTION
    Długi opis
.PARAMETER ComputerName
    To jest opis ComputerName
.PARAMETER State
    To jest opis State
.PARAMETER force
    To jest opis force
.EXAMPLE
    Set-LabComputerSystem -ComputerName PSA-DC1 -State Restart -force
    Opis przypadku użycia.
.EXAMPLE
    "BBB", "CCC" | Set-LabComputerSystem -Verbose
    Opis przypadku użycia.
.OUTPUTS
    Zwraca info tylko w kanale "Verbose"
#>
    [CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = "Medium")]
    param(
        [Parameter(
            Mandatory = $True,
            ValueFromPipeline = $True,
            ValueFromPipelineByPropertyName = $True)]
        [ValidatePattern("^PSA-\w{2,3}\d{1,2}$")]
        [string[]]$ComputerName,
        [Parameter(Mandatory = $True)]
        [ValidateSet('PowerOff', 'Shutdown', 'Restart', 'Logoff')]
        [string]$State,

        [switch]$Force
    )
    BEGIN {
        switch ($State) {
            'LogOff' {
                $_action = 0
            }
            'Shutdown' {
                $_action = 1
            }
            
        }
        if ($PSBoundParameters.ContainsKey('force')) {
            $_action += 4
        }
        Write-Verbose "Action value is $_action"
    }
    PROCESS {
        foreach ($computer in $ComputerName) {
            if ($PSCmdlet.ShouldProcess("$Computer - action is $_action")) {
                Write-Verbose "Contacting $Computer"
                $os = Get-WmiObject -Class Win32_OperatingSystem -ComputerName $Computer -EnableAllPrivileges
                $os.win32shutdown($_action)
            }
        }
    }
}

# jeśli nie działa to na SVR blokuje go firewall
# Enable-NetFirewallRule -DisplayGroup "Windows Management Instrumentation (WMI)"
